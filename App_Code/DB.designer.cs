#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.225
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="kemconsult")]
public partial class DBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Определения метода расширяемости
  partial void OnCreated();
  partial void InsertNews(News instance);
  partial void UpdateNews(News instance);
  partial void DeleteNews(News instance);
  partial void InsertBlog(Blog instance);
  partial void UpdateBlog(Blog instance);
  partial void DeleteBlog(Blog instance);
  partial void InsertSettings(Settings instance);
  partial void UpdateSettings(Settings instance);
  partial void DeleteSettings(Settings instance);
  partial void InsertLeftMenu(LeftMenu instance);
  partial void UpdateLeftMenu(LeftMenu instance);
  partial void DeleteLeftMenu(LeftMenu instance);
  partial void InsertTopMenuItem(TopMenuItem instance);
  partial void UpdateTopMenuItem(TopMenuItem instance);
  partial void DeleteTopMenuItem(TopMenuItem instance);
  partial void InsertPages(Pages instance);
  partial void UpdatePages(Pages instance);
  partial void DeletePages(Pages instance);
  partial void InsertQA(QA instance);
  partial void UpdateQA(QA instance);
  partial void DeleteQA(QA instance);
  partial void InsertQACategory(QACategory instance);
  partial void UpdateQACategory(QACategory instance);
  partial void DeleteQACategory(QACategory instance);
  #endregion
	
	public DBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["connection"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<News> News
	{
		get
		{
			return this.GetTable<News>();
		}
	}
	
	public System.Data.Linq.Table<Blog> Blog
	{
		get
		{
			return this.GetTable<Blog>();
		}
	}
	
	public System.Data.Linq.Table<Settings> Settings
	{
		get
		{
			return this.GetTable<Settings>();
		}
	}
	
	public System.Data.Linq.Table<LeftMenu> LeftMenu
	{
		get
		{
			return this.GetTable<LeftMenu>();
		}
	}
	
	public System.Data.Linq.Table<TopMenuItem> TopMenuItem
	{
		get
		{
			return this.GetTable<TopMenuItem>();
		}
	}
	
	public System.Data.Linq.Table<Pages> Pages
	{
		get
		{
			return this.GetTable<Pages>();
		}
	}
	
	public System.Data.Linq.Table<QA> QA
	{
		get
		{
			return this.GetTable<QA>();
		}
	}
	
	public System.Data.Linq.Table<QACategory> QACategory
	{
		get
		{
			return this.GetTable<QACategory>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
public partial class News : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Header;
	
	private string _Content;
	
	private string _PageHeader;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPageHeaderChanging(string value);
    partial void OnPageHeaderChanged();
    #endregion
	
	public News()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Header
	{
		get
		{
			return this._Header;
		}
		set
		{
			if ((this._Header != value))
			{
				this.OnHeaderChanging(value);
				this.SendPropertyChanging();
				this._Header = value;
				this.SendPropertyChanged("Header");
				this.OnHeaderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageHeader", DbType="NVarChar(500)")]
	public string PageHeader
	{
		get
		{
			return this._PageHeader;
		}
		set
		{
			if ((this._PageHeader != value))
			{
				this.OnPageHeaderChanging(value);
				this.SendPropertyChanging();
				this._PageHeader = value;
				this.SendPropertyChanged("PageHeader");
				this.OnPageHeaderChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blog")]
public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Header;
	
	private string _Content;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
	
	public Blog()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Header
	{
		get
		{
			return this._Header;
		}
		set
		{
			if ((this._Header != value))
			{
				this.OnHeaderChanging(value);
				this.SendPropertyChanging();
				this._Header = value;
				this.SendPropertyChanged("Header");
				this.OnHeaderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
public partial class Settings : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Name;
	
	private string _Value;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
	
	public Settings()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeftMenu")]
public partial class LeftMenu : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _ParetnId;
	
	private string _ItemName;
	
	private System.Nullable<int> _PageID;
	
	private System.Nullable<int> _Order;
	
	private EntitySet<LeftMenu> _LeftMenu2;
	
	private EntityRef<LeftMenu> _LeftMenu1;
	
	private EntityRef<Pages> _Pages;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnParetnIdChanging(System.Nullable<int> value);
    partial void OnParetnIdChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnPageIDChanging(System.Nullable<int> value);
    partial void OnPageIDChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    #endregion
	
	public LeftMenu()
	{
		this._LeftMenu2 = new EntitySet<LeftMenu>(new Action<LeftMenu>(this.attach_LeftMenu2), new Action<LeftMenu>(this.detach_LeftMenu2));
		this._LeftMenu1 = default(EntityRef<LeftMenu>);
		this._Pages = default(EntityRef<Pages>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParetnId", DbType="Int")]
	public System.Nullable<int> ParetnId
	{
		get
		{
			return this._ParetnId;
		}
		set
		{
			if ((this._ParetnId != value))
			{
				if (this._LeftMenu1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParetnIdChanging(value);
				this.SendPropertyChanging();
				this._ParetnId = value;
				this.SendPropertyChanged("ParetnId");
				this.OnParetnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string ItemName
	{
		get
		{
			return this._ItemName;
		}
		set
		{
			if ((this._ItemName != value))
			{
				this.OnItemNameChanging(value);
				this.SendPropertyChanging();
				this._ItemName = value;
				this.SendPropertyChanged("ItemName");
				this.OnItemNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", DbType="Int")]
	public System.Nullable<int> PageID
	{
		get
		{
			return this._PageID;
		}
		set
		{
			if ((this._PageID != value))
			{
				if (this._Pages.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPageIDChanging(value);
				this.SendPropertyChanging();
				this._PageID = value;
				this.SendPropertyChanged("PageID");
				this.OnPageIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
	public System.Nullable<int> Order
	{
		get
		{
			return this._Order;
		}
		set
		{
			if ((this._Order != value))
			{
				this.OnOrderChanging(value);
				this.SendPropertyChanging();
				this._Order = value;
				this.SendPropertyChanged("Order");
				this.OnOrderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeftMenu_LeftMenu", Storage="_LeftMenu2", ThisKey="id", OtherKey="ParetnId")]
	public EntitySet<LeftMenu> LeftMenu2
	{
		get
		{
			return this._LeftMenu2;
		}
		set
		{
			this._LeftMenu2.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeftMenu_LeftMenu", Storage="_LeftMenu1", ThisKey="ParetnId", OtherKey="id", IsForeignKey=true)]
	public LeftMenu LeftMenu1
	{
		get
		{
			return this._LeftMenu1.Entity;
		}
		set
		{
			LeftMenu previousValue = this._LeftMenu1.Entity;
			if (((previousValue != value) 
						|| (this._LeftMenu1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LeftMenu1.Entity = null;
					previousValue.LeftMenu2.Remove(this);
				}
				this._LeftMenu1.Entity = value;
				if ((value != null))
				{
					value.LeftMenu2.Add(this);
					this._ParetnId = value.id;
				}
				else
				{
					this._ParetnId = default(Nullable<int>);
				}
				this.SendPropertyChanged("LeftMenu1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pages_LeftMenu", Storage="_Pages", ThisKey="PageID", OtherKey="id", IsForeignKey=true)]
	public Pages Pages
	{
		get
		{
			return this._Pages.Entity;
		}
		set
		{
			Pages previousValue = this._Pages.Entity;
			if (((previousValue != value) 
						|| (this._Pages.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pages.Entity = null;
					previousValue.LeftMenu.Remove(this);
				}
				this._Pages.Entity = value;
				if ((value != null))
				{
					value.LeftMenu.Add(this);
					this._PageID = value.id;
				}
				else
				{
					this._PageID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Pages");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LeftMenu2(LeftMenu entity)
	{
		this.SendPropertyChanging();
		entity.LeftMenu1 = this;
	}
	
	private void detach_LeftMenu2(LeftMenu entity)
	{
		this.SendPropertyChanging();
		entity.LeftMenu1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TopMenuItem")]
public partial class TopMenuItem : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Title;
	
	private string _Content;
	
	private string _AlternateText;
	
	private System.Nullable<int> _PageId;
	
	private System.Nullable<int> _Order;
	
	private EntityRef<Pages> _Pages;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnAlternateTextChanging(string value);
    partial void OnAlternateTextChanged();
    partial void OnPageIdChanging(System.Nullable<int> value);
    partial void OnPageIdChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    #endregion
	
	public TopMenuItem()
	{
		this._Pages = default(EntityRef<Pages>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateText", DbType="NVarChar(500)")]
	public string AlternateText
	{
		get
		{
			return this._AlternateText;
		}
		set
		{
			if ((this._AlternateText != value))
			{
				this.OnAlternateTextChanging(value);
				this.SendPropertyChanging();
				this._AlternateText = value;
				this.SendPropertyChanged("AlternateText");
				this.OnAlternateTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", DbType="Int")]
	public System.Nullable<int> PageId
	{
		get
		{
			return this._PageId;
		}
		set
		{
			if ((this._PageId != value))
			{
				if (this._Pages.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPageIdChanging(value);
				this.SendPropertyChanging();
				this._PageId = value;
				this.SendPropertyChanged("PageId");
				this.OnPageIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
	public System.Nullable<int> Order
	{
		get
		{
			return this._Order;
		}
		set
		{
			if ((this._Order != value))
			{
				this.OnOrderChanging(value);
				this.SendPropertyChanging();
				this._Order = value;
				this.SendPropertyChanged("Order");
				this.OnOrderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pages_TopMenuItem", Storage="_Pages", ThisKey="PageId", OtherKey="id", IsForeignKey=true)]
	public Pages Pages
	{
		get
		{
			return this._Pages.Entity;
		}
		set
		{
			Pages previousValue = this._Pages.Entity;
			if (((previousValue != value) 
						|| (this._Pages.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pages.Entity = null;
					previousValue.TopMenuItem.Remove(this);
				}
				this._Pages.Entity = value;
				if ((value != null))
				{
					value.TopMenuItem.Add(this);
					this._PageId = value.id;
				}
				else
				{
					this._PageId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Pages");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pages")]
public partial class Pages : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Title;
	
	private string _DisplayLinkTitle;
	
	private string _Content;
	
	private EntitySet<LeftMenu> _LeftMenu;
	
	private EntitySet<TopMenuItem> _TopMenuItem;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDisplayLinkTitleChanging(string value);
    partial void OnDisplayLinkTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
	
	public Pages()
	{
		this._LeftMenu = new EntitySet<LeftMenu>(new Action<LeftMenu>(this.attach_LeftMenu), new Action<LeftMenu>(this.detach_LeftMenu));
		this._TopMenuItem = new EntitySet<TopMenuItem>(new Action<TopMenuItem>(this.attach_TopMenuItem), new Action<TopMenuItem>(this.detach_TopMenuItem));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayLinkTitle", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string DisplayLinkTitle
	{
		get
		{
			return this._DisplayLinkTitle;
		}
		set
		{
			if ((this._DisplayLinkTitle != value))
			{
				this.OnDisplayLinkTitleChanging(value);
				this.SendPropertyChanging();
				this._DisplayLinkTitle = value;
				this.SendPropertyChanged("DisplayLinkTitle");
				this.OnDisplayLinkTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pages_LeftMenu", Storage="_LeftMenu", ThisKey="id", OtherKey="PageID")]
	public EntitySet<LeftMenu> LeftMenu
	{
		get
		{
			return this._LeftMenu;
		}
		set
		{
			this._LeftMenu.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pages_TopMenuItem", Storage="_TopMenuItem", ThisKey="id", OtherKey="PageId")]
	public EntitySet<TopMenuItem> TopMenuItem
	{
		get
		{
			return this._TopMenuItem;
		}
		set
		{
			this._TopMenuItem.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LeftMenu(LeftMenu entity)
	{
		this.SendPropertyChanging();
		entity.Pages = this;
	}
	
	private void detach_LeftMenu(LeftMenu entity)
	{
		this.SendPropertyChanging();
		entity.Pages = null;
	}
	
	private void attach_TopMenuItem(TopMenuItem entity)
	{
		this.SendPropertyChanging();
		entity.Pages = this;
	}
	
	private void detach_TopMenuItem(TopMenuItem entity)
	{
		this.SendPropertyChanging();
		entity.Pages = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QA")]
public partial class QA : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Question;
	
	private string _Quester;
	
	private string _Phone;
	
	private string _Answer;
	
	private string _Answerer;
	
	private bool _Answered;
	
	private string _Header;
	
	private System.Nullable<System.DateTime> _Date;
	
	private int _CategoryId;
	
	private EntityRef<QACategory> _QACategory;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnQuesterChanging(string value);
    partial void OnQuesterChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnAnswererChanging(string value);
    partial void OnAnswererChanged();
    partial void OnAnsweredChanging(bool value);
    partial void OnAnsweredChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    #endregion
	
	public QA()
	{
		this._QACategory = default(EntityRef<QACategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Question
	{
		get
		{
			return this._Question;
		}
		set
		{
			if ((this._Question != value))
			{
				this.OnQuestionChanging(value);
				this.SendPropertyChanging();
				this._Question = value;
				this.SendPropertyChanged("Question");
				this.OnQuestionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quester", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string Quester
	{
		get
		{
			return this._Quester;
		}
		set
		{
			if ((this._Quester != value))
			{
				this.OnQuesterChanging(value);
				this.SendPropertyChanging();
				this._Quester = value;
				this.SendPropertyChanged("Quester");
				this.OnQuesterChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(64)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(MAX)")]
	public string Answer
	{
		get
		{
			return this._Answer;
		}
		set
		{
			if ((this._Answer != value))
			{
				this.OnAnswerChanging(value);
				this.SendPropertyChanging();
				this._Answer = value;
				this.SendPropertyChanged("Answer");
				this.OnAnswerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answerer", DbType="NVarChar(255)")]
	public string Answerer
	{
		get
		{
			return this._Answerer;
		}
		set
		{
			if ((this._Answerer != value))
			{
				this.OnAnswererChanging(value);
				this.SendPropertyChanging();
				this._Answerer = value;
				this.SendPropertyChanged("Answerer");
				this.OnAnswererChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answered", DbType="Bit NOT NULL")]
	public bool Answered
	{
		get
		{
			return this._Answered;
		}
		set
		{
			if ((this._Answered != value))
			{
				this.OnAnsweredChanging(value);
				this.SendPropertyChanging();
				this._Answered = value;
				this.SendPropertyChanged("Answered");
				this.OnAnsweredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
	public string Header
	{
		get
		{
			return this._Header;
		}
		set
		{
			if ((this._Header != value))
			{
				this.OnHeaderChanging(value);
				this.SendPropertyChanging();
				this._Header = value;
				this.SendPropertyChanged("Header");
				this.OnHeaderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
	public int CategoryId
	{
		get
		{
			return this._CategoryId;
		}
		set
		{
			if ((this._CategoryId != value))
			{
				if (this._QACategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryIdChanging(value);
				this.SendPropertyChanging();
				this._CategoryId = value;
				this.SendPropertyChanged("CategoryId");
				this.OnCategoryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QACategory_QA", Storage="_QACategory", ThisKey="CategoryId", OtherKey="id", IsForeignKey=true)]
	public QACategory QACategory
	{
		get
		{
			return this._QACategory.Entity;
		}
		set
		{
			QACategory previousValue = this._QACategory.Entity;
			if (((previousValue != value) 
						|| (this._QACategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._QACategory.Entity = null;
					previousValue.QA.Remove(this);
				}
				this._QACategory.Entity = value;
				if ((value != null))
				{
					value.QA.Add(this);
					this._CategoryId = value.id;
				}
				else
				{
					this._CategoryId = default(int);
				}
				this.SendPropertyChanged("QACategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QACategory")]
public partial class QACategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Name;
	
	private EntitySet<QA> _QA;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public QACategory()
	{
		this._QA = new EntitySet<QA>(new Action<QA>(this.attach_QA), new Action<QA>(this.detach_QA));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QACategory_QA", Storage="_QA", ThisKey="id", OtherKey="CategoryId")]
	public EntitySet<QA> QA
	{
		get
		{
			return this._QA;
		}
		set
		{
			this._QA.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_QA(QA entity)
	{
		this.SendPropertyChanging();
		entity.QACategory = this;
	}
	
	private void detach_QA(QA entity)
	{
		this.SendPropertyChanging();
		entity.QACategory = null;
	}
}
#pragma warning restore 1591
